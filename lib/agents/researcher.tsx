import { createStreamableUI, createStreamableValue } from 'ai/rsc'
import { CoreMessage, ToolCallPart, ToolResultPart, streamText } from 'ai'
import { getTools } from './tools'
import { getModel, transformToolMessages } from '../utils'
import { AnswerSection } from '@/components/answer-section'

export async function researcher(
  uiStream: ReturnType<typeof createStreamableUI>,
  streamableText: ReturnType<typeof createStreamableValue<string>>,
  messages: CoreMessage[]
) {
  let fullResponse = ''
  let hasError = false
  let finishReason = ''

  // Transform the messages if using Ollama provider
  let processedMessages = messages
  const useOllamaProvider = !!(
    process.env.OLLAMA_MODEL && process.env.OLLAMA_BASE_URL
  )
  const useAnthropicProvider = !!process.env.ANTHROPIC_API_KEY
  if (useOllamaProvider) {
    processedMessages = transformToolMessages(messages)
  }
  const includeToolResponses = messages.some(message => message.role === 'tool')
  const useSubModel = useOllamaProvider && includeToolResponses

  const streambleAnswer = createStreamableValue<string>('')
  const answerSection = <AnswerSection result={streambleAnswer.value} />

  const currentDate = new Date().toLocaleString()
  const result = await streamText({
    model: getModel(useSubModel),
    maxTokens: 2500,
    system: `As a professional medical search expert, you possess the ability to search for any medical information on the web. 
    For each user query, utilize the search results to their fullest potential to provide comprehensive and informative medical articles. 
    Ensure the user query is medical related strictly, if not just say in a nice way it is not a medical query and ask them to try again. 

Structure your response based on the query type using h3 headers:

    Drug:
        Mechanism of action
        Indications
        Dosage
        Side effects
        Interactions
        Precautions
        Warnings
        Overdose
        Storage
        Availability
        Medical disclaimer
    Disease:
        Definition
        Causes
        Symptoms
        Diagnosis
        Treatment
        Prevention
        Outlook
        Medical disclaimer
    Condition:
        Definition
        Symptoms
        Causes
        Risk factors
        Diagnosis
        Treatment
        Prevention
        Outlook
        Medical Disclaimer
    Symptoms asking for cause:
        Acknowledge the Limitations in italics: Clearly show a disclaimer that the provided information is for informational purposes only and cannot replace professional medical advice.
        Identify Symptoms: Clearly list the symptoms mentioned by the user.
        Most likely diagnosis: Try to predict the most likely diagnosis based on search results. Again add a disclaimer that this is not professional medical advice is generated by AI which can be wrong.
        Other possible Causes: Provide a list of potential conditions or diseases associated with the described symptoms. 
        Categorize: If possible, categorize the potential causes (e.g., respiratory, digestive, neurological).
        Prioritize: Based on symptom severity and commonality, consider prioritizing certain conditions.
        Encourage Medical Consultation: Strongly advise the user to seek medical attention for a proper diagnosis and treatment plan.
        Provide Additional Information: Offer suggestions for self-care or symptom management while awaiting medical evaluation (if applicable).

    Start with a very relevant image to the topic. If there are any images relevant to sections of your answer, be sure to include them in the markdown as well.
    Always explicitly cite the source URL using the [[number]](url) format when quoting or referencing information. 
    Aim to directly address the user's question. Augment your response with insights gleaned from the search results. 
    Match the language of the response to the user's language. Whenever quoting or referencing information from a specific URL, always explicitly cite the source URL using the [[number]](url) format. Multiple citations can be included as needed, e.g., [[number]](url), [[number]](url).
    The number must always match the order of the search results.
    The retrieve tool can only be used with URLs provided by the user. URLs from search results cannot be used. If it is a domain instead of a URL, specify it in the include_domains of the search tool.
    Please match the language of the response to the user's language. Current date and time: ${currentDate}
    `,
    messages: processedMessages,
    tools: getTools({
      uiStream,
      fullResponse
    }),
    onFinish: async event => {
      finishReason = event.finishReason
      fullResponse = event.text
      streambleAnswer.done()
    }
  }).catch(err => {
    hasError = true
    fullResponse = 'Error: ' + err.message
    streamableText.update(fullResponse)
  })

  // If the result is not available, return an error response
  if (!result) {
    return { result, fullResponse, hasError, toolResponses: [] }
  }

  const hasToolResult = messages.some(message => message.role === 'tool')
  if (!useAnthropicProvider || hasToolResult) {
    uiStream.append(answerSection)
  }

  // Process the response
  const toolCalls: ToolCallPart[] = []
  const toolResponses: ToolResultPart[] = []
  for await (const delta of result.fullStream) {
    switch (delta.type) {
      case 'text-delta':
        if (delta.textDelta) {
          fullResponse += delta.textDelta
          if (useAnthropicProvider && !hasToolResult) {
            streamableText.update(fullResponse)
          } else {
            streambleAnswer.update(fullResponse)
          }
        }
        break
      case 'tool-call':
        toolCalls.push(delta)
        break
      case 'tool-result':
        if (!delta.result) {
          hasError = true
        }
        toolResponses.push(delta)
        break
      case 'error':
        console.log('Error: ' + delta.error)
        hasError = true
        fullResponse += `\nError occurred while executing the tool`
        break
    }
  }
  messages.push({
    role: 'assistant',
    content: [{ type: 'text', text: fullResponse }, ...toolCalls]
  })

  if (toolResponses.length > 0) {
    // Add tool responses to the messages
    messages.push({ role: 'tool', content: toolResponses })
  }

  return { result, fullResponse, hasError, toolResponses, finishReason }
}
